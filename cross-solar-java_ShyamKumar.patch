From 7b5889eddaf5703b4b02cf5604fe0c9c12937c60 Mon Sep 17 00:00:00 2001
From: skshyam <33842318+skshyam@users.noreply.github.com>
Date: Sun, 24 Jun 2018 04:28:52 +0400
Subject: [PATCH] My submission
XOV: XO_0_0_1

---
 gradlew                                       |  0
 .../techtrial/controller/PanelController.java | 31 ++++++++++++-------
 .../techtrial/dto/DailyElectricity.java       | 18 ++++++++++-
 .../exceptions/GlobalExceptionHandler.java    |  0
 .../com/crossover/techtrial/model/Panel.java  |  7 +++++
 .../DailyElectricityRepository.java           | 26 ++++++++++++++++
 .../service/DailyElectricityService.java      | 16 ++++++++++
 .../service/DailyElectricityServiceImpl.java  | 29 +++++++++++++++++
 .../db/changelog/db.changelog-1.0.xml         |  0
 .../db/changelog/db.changelog-master.xml      |  0
 .../controller/PanelControllerTest.java       | 25 +++++++++++++--
 11 files changed, 137 insertions(+), 15 deletions(-)
 mode change 100755 => 100644 gradlew
 mode change 100755 => 100644 src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
 create mode 100644 src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
 create mode 100644 src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
 create mode 100644 src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-1.0.xml
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-master.xml

diff --git a/gradlew b/gradlew
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..a4f89ec 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -1,12 +1,8 @@
 package com.crossover.techtrial.controller;
 
-import com.crossover.techtrial.dto.DailyElectricity;
-import com.crossover.techtrial.model.HourlyElectricity;
-import com.crossover.techtrial.model.Panel;
-import com.crossover.techtrial.service.HourlyElectricityService;
-import com.crossover.techtrial.service.PanelService;
-import java.util.ArrayList;
+import java.time.LocalDate;
 import java.util.List;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -18,6 +14,13 @@ import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RestController;
 
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.DailyElectricityService;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.PanelService;
+
 /**
  * Panel Controller for all Rest APIs related to Panel.
  * @author Crossover
@@ -32,6 +35,9 @@ public class PanelController {
   
   @Autowired
   HourlyElectricityService hourlyElectricityService;
+
+  @Autowired
+  DailyElectricityService dailyElectricityService;
   
   /**
    * Register a Panel to System and start receiving the electricity statistics.
@@ -64,7 +70,7 @@ public class PanelController {
   
   @GetMapping(path = "/api/panels/{panel-serial}/hourly")
   public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
+      @PathVariable(value = "panel-serial") String panelSerial,
       @PageableDefault(size = 5,value = 0) Pageable pageable) {
     Panel panel = panelService.findBySerial(panelSerial);
     if (panel == null) {
@@ -85,11 +91,12 @@ public class PanelController {
   @GetMapping(path = "/api/panels/{panel-serial}/daily")
   public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
       @PathVariable(value = "panel-serial") String panelSerial) {
-    List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
-    /**
-     * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
-     * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
-     */
+    Panel panel = panelService.findBySerial(panelSerial);
+    if (panel == null) {
+      return ResponseEntity.notFound().build(); 
+    }
+    LocalDate today = LocalDate.now();
+    List<DailyElectricity> dailyElectricityForPanel = dailyElectricityService.getAggregations(panel.getId(), today);
     return ResponseEntity.ok(dailyElectricityForPanel);
   }
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
index b0e0ea9..d1cd2b1 100644
--- a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
@@ -22,8 +22,24 @@ public class DailyElectricity implements Serializable {
   private Long min;
   
   private Long max;
+  
+  
+
+  /**
+ * @param sum
+ * @param average
+ * @param min
+ * @param max
+ */
+public DailyElectricity(Long sum, Double average, Long min, Long max) {
+	super();
+	this.sum = sum;
+	this.average = average;
+	this.min = min;
+	this.max = max;
+}
 
-  public LocalDate getDate() {
+public LocalDate getDate() {
     return date;
   }
 
diff --git a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/model/Panel.java b/src/main/java/com/crossover/techtrial/model/Panel.java
index 34fb762..b297e60 100644
--- a/src/main/java/com/crossover/techtrial/model/Panel.java
+++ b/src/main/java/com/crossover/techtrial/model/Panel.java
@@ -1,13 +1,17 @@
 package com.crossover.techtrial.model;
 
 import java.io.Serializable;
+
 import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.Table;
+import javax.validation.constraints.Digits;
 import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
+
 import org.springframework.lang.Nullable;
 
 /**
@@ -27,12 +31,15 @@ public class Panel implements Serializable {
   Long id;
 
   @NotNull
+  @Size(min=16, max=16)
   @Column(name = "serial")
   String serial;
 
+  @Digits(integer=3,fraction=6)
   @Column(name = "longitude")
   Double longitude;
 
+  @Digits(integer=3,fraction=6)
   @Column(name = "latitude")
   Double latitude;
 
diff --git a/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
new file mode 100644
index 0000000..0f1f964
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
@@ -0,0 +1,26 @@
+package com.crossover.techtrial.repository;
+
+import java.time.LocalDate;
+import java.util.List;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.rest.core.annotation.RestResource;
+
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+
+/**
+ * DailyElectricity Repository is for all operations for DailyElectricity.
+ * @author Shyam
+ */
+@RestResource(exported = false)
+public interface DailyElectricityRepository 
+    extends JpaRepository<HourlyElectricity,Long> {
+	
+  @Query("select new com.crossover.techtrial.dto.DailyElectricity(sum(hourlyElectricity.generatedElectricity) as sum,"
+  		+ "avg(hourlyElectricity.generatedElectricity) as average, min(hourlyElectricity.generatedElectricity) as min,"
+  		+ "max(hourlyElectricity.generatedElectricity) as max) from HourlyElectricity hourlyElectricity"
+  		+ "where hourlyElectricity.panel.id=?1 and trunc(hourlyElectricity.readingAt)<?2")
+  List<DailyElectricity> getAggregations(Long panelId, LocalDate readingDate);
+}
diff --git a/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java b/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
new file mode 100644
index 0000000..25a8df5
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
@@ -0,0 +1,16 @@
+package com.crossover.techtrial.service;
+
+import java.time.LocalDate;
+import java.util.List;
+
+import com.crossover.techtrial.dto.DailyElectricity;
+
+/**
+ * DailyElectricityService interface for aggregating DailyElectricity.
+ * @author Shyam
+ *
+ */
+public interface DailyElectricityService {
+  
+  List<DailyElectricity> getAggregations(Long panelId, LocalDate readingDate);
+}
diff --git a/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
new file mode 100644
index 0000000..8765925
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
@@ -0,0 +1,29 @@
+package com.crossover.techtrial.service;
+
+import java.time.LocalDate;
+import java.util.List;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.repository.DailyElectricityRepository;
+
+/**
+ * DailyElectricityServiceImpl will handle electricity generated by a Panel.
+ *
+ * @author Shyam
+ *
+ */
+
+@Service
+public class DailyElectricityServiceImpl implements DailyElectricityService {
+  @Autowired
+  DailyElectricityRepository dailyElectricityRepository;
+  
+  @Override
+  public List<DailyElectricity> getAggregations(Long panelId, LocalDate readingDate) {
+	  return dailyElectricityRepository.getAggregations(panelId, readingDate);
+  }
+  
+}
\ No newline at end of file
diff --git a/src/main/resources/db/changelog/db.changelog-1.0.xml b/src/main/resources/db/changelog/db.changelog-1.0.xml
old mode 100755
new mode 100644
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
old mode 100755
new mode 100644
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..6b97a74 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -1,6 +1,7 @@
 package com.crossover.techtrial.controller;
 
-import com.crossover.techtrial.model.Panel;
+import java.time.LocalDateTime;
+
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -10,15 +11,18 @@ import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.test.web.client.TestRestTemplate;
+import org.springframework.data.domain.Page;
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.test.web.servlet.MockMvc;
-
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+
 
 /**
  * PanelControllerTest class will test all APIs in PanelController.java.
@@ -52,6 +56,23 @@ public class PanelControllerTest {
         "/api/register", panel, Panel.class);
     Assert.assertEquals(202,response.getStatusCode().value());
   }
+  
+  @Test
+  public void testSaveHourlyElectricity() throws Exception {
+	  HourlyElectricity he = new HourlyElectricity();
+	  he.setReadingAt(LocalDateTime.now());
+	  he.setGeneratedElectricity(130l);
+    HttpEntity<HourlyElectricity> panelHour = new HttpEntity<HourlyElectricity>(he ,new HttpHeaders());
+    ResponseEntity<HourlyElectricity> response = template.postForEntity(
+        "/api/panels/1234567890123456/hourly", panelHour, HourlyElectricity.class);
+    Assert.assertEquals(200,response.getStatusCode().value());
+  }
+  
+  @Test
+  public void testGetHourlyElectricity() throws Exception {
+    ResponseEntity<Page> response = template.getForEntity("/api/panels/1234567890123456/hourly", Page.class);
+    Assert.assertEquals(2000, response.getStatusCode().value());
+  }
 
   private HttpEntity<Object> getHttpEntity(Object body) {
     HttpHeaders headers = new HttpHeaders();
-- 
2.18.0.windows.1

